@model CompanyPage

@{
    var headerTag = CompanyPage.GenerateCompanyProfilePageHeaderTags(Model.Name, Model.Symbol,
    Model.HasDividends, Model.UpcomingDividends != null ? Model.UpcomingDividends.Length : 0);

    ViewBag.title = headerTag.Title;
    ViewBag.description = headerTag.Description;
    ViewBag.canonical = headerTag.CanonicalTag;
    ViewBag.ogTags = headerTag.OgMetaTags;
    ViewBag.twitterOgTags = headerTag.TwitterOgMetaTags;
}

@if (Model.TodaysDividend != null)
{
    // DIVIDEND BEING PAID OUT TODAY
    // SHOW BANNER AT TOP OF SCREEN
    <div
        style="display: flex; align-items: center; background: #5887FF; color: white; padding: 1rem; margin-bottom: 2rem; margin-top: 4rem; position: sticky; top: 20px;">
        <p style="color: white !important; font-weight: 500 !important;">
            ðŸŽ‰ <strong>@Model.Name has a dividend today of $@Model.TodaysDividend.Dividend per share!</strong>
        </p>
    </div>
}
else
{
    if (Model.UpcomingDividends != null)
    {
        // COMPANY HAS UPCOMING DIVIDEND
        // SHOW BANNER AT TOP OF SCREEN
        DivData nextDividend = Model.UpcomingDividends[0];
        DateTime d = DateTime.Parse(Model.UpcomingDividends[0].PaymentDate);
        foreach (var x in Model.UpcomingDividends)
        {
            if (DateTime.Parse(x.PaymentDate) < d)
            {
                nextDividend = x;
            }
        }
        TimeSpan nextDividendInDays = DateTime.Parse(nextDividend.PaymentDate) - DateTime.Now;
        <div
            style="display: flex; align-items: center; background: #5887FF; color: white; padding: 1rem; margin-bottom: 2rem; margin-top: 4rem; position: sticky; top: 20px;">
            <svg xmlns="http://www.w3.org/2000/svg" width="36" height="36" fill="currentColor" viewBox="0 0 16 16"
                style="margin-right: .4rem">
                <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14m0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16" />
                <path
                    d="m8.93 6.588-2.29.287-.082.38.45.083c.294.07.352.176.288.469l-.738 3.468c-.194.897.105 1.319.808 1.319.545 0 1.178-.252 1.465-.598l.088-.416c-.2.176-.492.246-.686.246-.275 0-.375-.193-.304-.533zM9 4.5a1 1 0 1 1-2 0 1 1 0 0 1 2 0" />
            </svg>
            @if (@Math.Floor(nextDividendInDays.TotalDays) == 1)
            {
                <p style="color: white !important; font-weight: 500 !important;">
                    The next dividend from @Model.Name is scheduled for tomorrow!
                    There will be a payout of $@nextDividend.Dividend per share.
                </p>
            }
            else
            {
                <p style="color: white !important; font-weight: 500 !important;">
                    The next dividend from @Model.Name is scheduled for @Model.CleanDate(nextDividend.PaymentDate).
                    A payout of $@nextDividend.Dividend per share, occurring in @Math.Floor(nextDividendInDays.TotalDays) days.
                </p>
            }

        </div>
    }

    if (Model.UpcomingDividends == null && Model.HasDividends)
    {
        // COMPANY HAS NO UPCOMING DIVIDENDS (BUT DOES PAY DIVIDENDS)
        // SHOW BANNER AT TOP OF SCREEN
        <div
            style="display: flex; align-items: center; background: #5887FF; color: white; padding: 1rem; margin-bottom: 2rem; margin-top: 4rem; position: sticky; top: 20px;">
            <svg xmlns="http://www.w3.org/2000/svg" width="36" height="36" fill="currentColor" viewBox="0 0 16 16"
                style="margin-right: .4rem">
                <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14m0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16" />
                <path
                    d="m8.93 6.588-2.29.287-.082.38.45.083c.294.07.352.176.288.469l-.738 3.468c-.194.897.105 1.319.808 1.319.545 0 1.178-.252 1.465-.598l.088-.416c-.2.176-.492.246-.686.246-.275 0-.375-.193-.304-.533zM9 4.5a1 1 0 1 1-2 0 1 1 0 0 1 2 0" />
            </svg>
            <p style="color: white !important; font-weight: 500 !important;">
                @Model.Name does not have any upcoming dividends.<br>Revisit at a later time to check for any newly announced
                dividend payments.
            </p>
        </div>
    }
}

<div itemscope itemtype="https://schema.org/Corporation">
    <div style="display: flex; align-items: center; margin-bottom: 1rem">
        @if (Model.CompanyLogo != null)
        {
            <img src="@Url.Content($"~/imgs/{Model.Symbol.ToUpper()}.png")" alt="@Model.Name logo" class="img-fliud company-logo-img"
                style="margin: 0 !important; max-width: 100px !important; max-height: 100px !important; object-fit: cover !important;"
                itemprop="logo" />
        }
        <div style="margin-left: 1rem;">
            <h1 itemprop="name" style="margin-bottom: 0 !important; line-height: 1 !important">@Model.Name</h1>
            <p style="font-weight: 500 !important;">
                <span itemprop="tickerSymbol">@Model.Symbol </span>&#183; @Model.Exchange
            </p>
        </div>
    </div>

    @if (Model.HasDividends)
    {
        // UPCOMING DIVIDENDS
        @if (Model.UpcomingDividends != null)
        {
            <div style="margin-top: 1rem; margin-bottom: .4rem !important;">
                <h2>
                    Upcoming Dividends
                    @* (@Model.UpcomingDividends.Length) *@
                </h2>
            </div>


            <table class="table table-bordered" style="margin-bottom: 1.8rem;">
                <thead>
                    <tr>
                        <th scope="col">Amount</th>
                        <th scope="col">Payment Date</th>
                        <th scope="col">Declaration Date</th>
                        <th scope="col">Record Date</th>
                    </tr>
                </thead>
                <tbody>

                    @if (Model.UpcomingDividends.Length > 1)
                    {
                        // if there are more than 1 upcoming dividends, highlight the next payment table row
                        for (int i = 0; i < Model.UpcomingDividends.Length; i++)
                        {
                            if (i == Model.UpcomingDividends.Length - 1)
                            {
                                <tr>
                                    <th scope="row">$@Model.UpcomingDividends[i].Dividend</th>
                                    <td>@Model.CleanDate(Model.UpcomingDividends[i].PaymentDate)</td>
                                    <td>@Model.CleanDate(Model.UpcomingDividends[i].DeclarationDate)</td>
                                    <td>@Model.CleanDate(Model.UpcomingDividends[i].RecordDate)</td>
                                </tr>
                            }
                            else if (i == Model.UpcomingDividends.Length - 2)
                            {
                                <tr>
                                    <th scope="row">$@Model.UpcomingDividends[i].Dividend</th>
                                    <td>@Model.CleanDate(Model.UpcomingDividends[i].PaymentDate)</td>
                                    <td>@Model.CleanDate(Model.UpcomingDividends[i].DeclarationDate)</td>
                                    <td>@Model.CleanDate(Model.UpcomingDividends[i].RecordDate)</td>
                                </tr>
                            }
                            else
                            {
                                <tr>
                                    <th scope="row">$@Model.UpcomingDividends[i].Dividend</th>
                                    <td>@Model.CleanDate(Model.UpcomingDividends[i].PaymentDate)</td>
                                    <td>@Model.CleanDate(Model.UpcomingDividends[i].DeclarationDate)</td>
                                    <td>@Model.CleanDate(Model.UpcomingDividends[i].RecordDate)</td>
                                </tr>
                            }
                        }
                    }
                    else
                    {
                        @foreach (var x in Model.UpcomingDividends)
                        {
                            <tr>
                                <td scope="row">$@x.Dividend</td>
                                <td>@Model.CleanDate(x.PaymentDate)</td>
                                <td>@Model.CleanDate(x.DeclarationDate)</td>
                                <td>@Model.CleanDate(x.RecordDate)</td>
                            </tr>
                        }
                    }

                </tbody>
            </table>
        }

        // RECENT DIVIDENDS
        @if (Model.PastDividends == null)
        {
            <p>There are no Recent Dividend Payments.</p>
        }
        else
        {
            DateTime oldestDividend = DateTime.Parse(Model.PastDividends[0].PaymentDate);

            foreach (var x in Model.PastDividends)
            {
                if (DateTime.Parse(x.PaymentDate) < oldestDividend)
                {
                    oldestDividend = DateTime.Parse(x.PaymentDate);
                }
            }
            TimeSpan duration = DateTime.Now - oldestDividend;
            decimal totalDividendPayments = 0;
            foreach (var x in Model.PastDividends)
            {
                totalDividendPayments += (decimal)x.Dividend;
            }

            Array.Reverse(Model.PastDividends); // this will show the most recent payments at top of recent dividends table
            TimeSpan mostRecentPaymentDaysAgo = DateTime.Now - DateTime.Parse(Model.PastDividends[0].PaymentDate);

            <hr>

            <h2>
                Recent Dividends
            </h2>

            <p style="margin-bottom: .8rem !important;">
                <b>@Model.Name</b> has paid out $@totalDividendPayments in dividends from
                @DateTime.Parse(Model.PastDividends[Model.PastDividends.Length - 1].PaymentDate).ToString("MMMM yyyy") to
                @DateTime.Parse(Model.PastDividends[0].PaymentDate).ToString("MMMM yyyy").
                <br>
                During this period, there were
                @Model.PastDividends.Length payments with an average of $@Model.PastDividends.Select(x =>
        x.Dividend).Average()?.ToString("F2")
                paid per share.
                <br>
                The most recent payment occurred on
                @DateTime.Parse(Model.PastDividends[0].PaymentDate).ToString("MMMM dd, yyyy")
                (@Math.Floor(mostRecentPaymentDaysAgo.TotalDays) days ago).
            </p>
            <table class="table table-bordered" style="margin-bottom: 1.8rem;">
                <thead>
                    <tr>
                        <th scope="col">Amount</th>
                        <th scope="col">Paid On</th>
                        <th scope="col">Declaration Date</th>
                        <th scope="col">Record Date</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var x in Model.PastDividends)
                    {

                        <tr>
                            <td scope="row">$@x.Dividend</td>
                            <td>@Model.CleanDate(x.PaymentDate)</td>
                            <td>@Model.CleanDate(x.DeclarationDate)</td>
                            <td>@Model.CleanDate(x.RecordDate)</td>
                        </tr>
                    }
                </tbody>
            </table>
        }
    }
    // COMPANY DOES NOT PAY DIVIDENDS
    else
    {
        <p><strong>@Model.Name does not Pay Dividends.</strong></p>
    }

    @if (Model.Description != null)
    {
        <hr>
        <div style="margin-bottom: 1.6rem;">
            <h2>About @Model.Name</h2>
            @for (int i = 0; i < Model.Description.Length; i++)
            {
                if (i == 0)
                {
                    <p itemprop="description" class="company-description-ptag">@Model.Description[i]</p>
                }
                else
                {
                    <p class="company-description-ptag">@Model.Description[i]</p>
                }
            }
        </div>
    }

    @if (Model.RelatedStocks != null)
    {
        <hr>
        <div>
            <h2>
                Related @Model.Exchange
            </h2>
            @foreach (var x in Model.RelatedStocks)
            {
                <a style="display: block; font-weight: 500 !important; width: fit-content"
                    href="@x.CompanySymbol.ToLower()">&#183;
                    @x.CompanyName</a>
            }
        </div>
    }
</div>
